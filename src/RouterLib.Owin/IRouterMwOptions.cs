using System;
using System.Collections.Generic;
using System.Threading.Tasks;

using RouterLib;

namespace RouterLib.Owin
{
    
    using AppFunc = Func<IDictionary<string, object>, Task>;

    // original owin context, routing results, returns a task
    using ProcessResponseFunc = Func<IDictionary<string, object>, RoutingResultBase, Task>;
    // original owin context, Error, Exception generated by router, Next in OwinPipeline returns a task
    using ExceptionFunc = Func<IDictionary<string, object>, Exception, Func<IDictionary<string, object>, Task>, Task>;
    // Owin original context, Next in Owin pipeline, returns a task
    using NoRouteFoundFunc = Func<IDictionary<string, object>, Func<IDictionary<string, object>, Task>, Task>;
    

    public interface IRouterMwOptions
    {

        ProcessResponseFunc OnProcessResponse { get; set; } // used to process responses (i.e. copy to the down stream).
        ExceptionFunc OnException { get; set; }  // if router throw an exception this will be called
        NoRouteFoundFunc OnNoRouteFound { get; set; } 

        void Validate();

        Task ProcessOwinRequestAsync(AppFunc Next, IDictionary<string, object> environment );

    }
   }
